# src/parser.py

from src.token import Token  # Import the Token class
from src.ast_node import ASTNode  # Import the ASTNode class

class ParserError(Exception):
    """Custom exception for parser errors."""
    pass

class Parser:
    def __init__(self, tokens):
        """
        Initialize the Parser.
        
        :param tokens: A list of Token objects generated by the lexer.
        """
        self.tokens = tokens
        self.position = 0
        self.current_token = self.tokens[self.position]

    def advance(self):
        """Advance to the next token in the token list."""
        self.position += 1
        if self.position < len(self.tokens):
            self.current_token = self.tokens[self.position]
        else:
            self.current_token = Token(token_type='EOF', value=None)

    def eat(self, token_type):
        """
        Consume the current token if it matches the expected type.
        
        :param token_type: The expected token type.
        """
        if self.current_token.token_type == token_type:
            self.advance()
        else:
            self.error(f"Expected {token_type}, got {self.current_token.token_type}")

    def error(self, message):
        """Raise a syntax error with the provided message."""
        raise SyntaxError(message)

    def skip_newlines(self):
        """Skip over any NEWLINE tokens."""
        while self.current_token.token_type == 'NEWLINE':
            self.advance()

    def parse(self):
        """
        Start the parsing process by parsing the entire program.
        
        :return: The root ASTNode representing the program.
        """
        return self.program()

    def program(self):
        """
        Parse the entire program consisting of multiple statements.
        
        :return: An ASTNode representing the program.
        """
        statements = []
        self.skip_newlines()  # Skip any leading newlines
        while self.current_token.token_type != 'EOF':
            stmt = self.statement()
            statements.append(stmt)
            self.skip_newlines()  # Skip any newlines between statements
        return ASTNode('PROGRAM', children=statements)

    def statement(self):
        """
        Parse a single statement.
        
        :return: An ASTNode representing the statement.
        """
        self.skip_newlines()  # Skip any leading newlines
        if self.current_token.token_type == 'IDENTIFIER':
            return self.assignment()
        elif self.current_token.token_type == 'PRINT':
            return self.print_statement()
        else:
            self.error(f"Unexpected token: {self.current_token.token_type}")

    def assignment(self):
        """
        Parse an assignment statement.
        
        :return: An ASTNode representing the assignment.
        """
        left = self.current_token  # The variable name
        self.eat('IDENTIFIER')
        self.eat('ASSIGN')
        right = self.expression()
        return ASTNode('ASSIGN', value=left.value, children=[right])

    def print_statement(self):
        """
        Parse a print statement.
        
        :return: An ASTNode representing the print statement.
        """
        self.eat('PRINT')
        self.eat('LPAREN')
        expr = self.expression()
        self.eat('RPAREN')
        return ASTNode('PRINT', children=[expr])

    def expression(self):
        """
        Parse an expression, supporting binary operations like addition.
        
        :return: An ASTNode representing the expression.
        """
        left = self.current_token
        if left.token_type in ('IDENTIFIER', 'NUMBER'):
            self.advance()  # Move past the first operand

            # Handle binary operations (only addition for now)
            if self.current_token.token_type == 'PLUS':
                self.eat('PLUS')
                right = self.current_token
                if right.token_type in ('IDENTIFIER', 'NUMBER'):
                    self.advance()
                    return ASTNode('BINARY_OP', value='+', children=[
                        ASTNode(left.token_type, value=left.value),
                        ASTNode(right.token_type, value=right.value)
                    ])
                else:
                    self.error(f"Unexpected token in expression: {right.token_type}")
            else:
                # Single operand (identifier or number)
                return ASTNode(left.token_type, value=left.value)
        else:
            self.error(f"Unexpected token in expression: {left.token_type}")
